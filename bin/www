#!/usr/bin/env node

const http = require("http");
const path = require("path");

// reference the front end folder inside public


let app = require("../app");

// catch 404 and render a json response
// use 404 handler just for api request starting with /api
app.use("/api", (req, res, next) => {
  res.status(404);
  res.json({ status: 404, message: "Route Not Found" });
});

//send React's HTML file for URLs that don't begin with /api
// (the React router will handle thos.URLs)
app.use((req,res,next)=>{
  res.sendFile(path.resolve(__dirname, "..", "public", "index.html"))
})



app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.json({ status: 500, message: "Error. Check the backend terminal." });
  }
});

let server = http.createServer(app);

server.on("error", error => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
